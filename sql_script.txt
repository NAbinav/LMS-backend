-- Learning Management System Database Schema
-- Complete SQL implementation with all tables, relationships, and foreign keys

-- Drop existing tables if they exist (in reverse dependency order)
DROP TABLE IF EXISTS Quiz_Attempts;
DROP TABLE IF EXISTS Quiz_Questions;
DROP TABLE IF EXISTS Quizzes;
DROP TABLE IF EXISTS Discussion_Posts;
DROP TABLE IF EXISTS Discussions;
DROP TABLE IF EXISTS Notifications;
DROP TABLE IF EXISTS User_Progress;
DROP TABLE IF EXISTS Submissions;
DROP TABLE IF EXISTS Assignments;
DROP TABLE IF EXISTS Modules;
DROP TABLE IF EXISTS Enrollments;
DROP TABLE IF EXISTS Courses;
DROP TABLE IF EXISTS Users;

-- Create Users table (base table, no dependencies)
CREATE TABLE Users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('student', 'instructor', 'admin') NOT NULL DEFAULT 'student',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_email (email),
    INDEX idx_role (role)
);


-- Create Courses table (depends on Users for instructor)
CREATE TABLE Courses (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    instructor_id INT NOT NULL,
    credits INT NOT NULL DEFAULT 3,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (instructor_id) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    INDEX idx_instructor (instructor_id),
    INDEX idx_title (title),
    INDEX idx_created_at (created_at)
);


-- Create Enrollments table (many-to-many relationship between Users and Courses)
CREATE TABLE Enrollments (
    user_id INT NOT NULL,
    course_id INT NOT NULL,
    enrollment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'completed', 'dropped', 'pending') NOT NULL DEFAULT 'active',
    PRIMARY KEY (user_id, course_id),
    FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (course_id) REFERENCES Courses(id) ON DELETE CASCADE ON UPDATE CASCADE,
    INDEX idx_enrollment_date (enrollment_date),
    INDEX idx_status (status)
);

-- Create Modules table (depends on Courses)
CREATE TABLE Modules (
    id INT PRIMARY KEY AUTO_INCREMENT,
    course_id INT NOT NULL,
    title VARCHAR(200) NOT NULL,
    order_num INT NOT NULL,
    content LONGTEXT,
    FOREIGN KEY (course_id) REFERENCES Courses(id) ON DELETE CASCADE ON UPDATE CASCADE,
    INDEX idx_course_order (course_id, order_num),
    UNIQUE KEY uk_course_order (course_id, order_num)
);

-- Create Assignments table (depends on Courses)
CREATE TABLE Assignments (
    id INT PRIMARY KEY AUTO_INCREMENT,
    course_id INT NOT NULL,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    due_date DATETIME,
    max_points INT NOT NULL DEFAULT 100,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (course_id) REFERENCES Courses(id) ON DELETE CASCADE ON UPDATE CASCADE,
    INDEX idx_course_due_date (course_id, due_date),
    INDEX idx_due_date (due_date)
);

-- Create Submissions table (depends on Assignments and Users)
CREATE TABLE Submissions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    assignment_id INT NOT NULL,
    user_id INT NOT NULL,
    submission_text LONGTEXT,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    grade DECIMAL(5,2) NULL,
    graded_at TIMESTAMP NULL,
    graded_by INT NULL,
    FOREIGN KEY (assignment_id) REFERENCES Assignments(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (graded_by) REFERENCES Users(id) ON DELETE SET NULL ON UPDATE CASCADE,
    UNIQUE KEY uk_assignment_user (assignment_id, user_id),
    INDEX idx_submitted_at (submitted_at),
    INDEX idx_grade (grade)
);

-- Create Quizzes table (depends on Courses)
CREATE TABLE Quizzes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    course_id INT NOT NULL,
    title VARCHAR(200) NOT NULL,
    time_limit INT NULL, -- in minutes
    max_attempts INT DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (course_id) REFERENCES Courses(id) ON DELETE CASCADE ON UPDATE CASCADE,
    INDEX idx_course_id (course_id)
);

-- Create Quiz_Questions table (depends on Quizzes)
CREATE TABLE Quiz_Questions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    quiz_id INT NOT NULL,
    question_text TEXT NOT NULL,
    correct_answer TEXT NOT NULL,
    question_type ENUM('multiple_choice', 'true_false', 'short_answer') DEFAULT 'multiple_choice',
    points INT DEFAULT 1,
    order_num INT NOT NULL,
    FOREIGN KEY (quiz_id) REFERENCES Quizzes(id) ON DELETE CASCADE ON UPDATE CASCADE,
    INDEX idx_quiz_order (quiz_id, order_num),
    UNIQUE KEY uk_quiz_order (quiz_id, order_num)
);

-- Create Quiz_Attempts table (depends on Quizzes and Users)
CREATE TABLE Quiz_Attempts (
    id INT PRIMARY KEY AUTO_INCREMENT,
    quiz_id INT NOT NULL,
    user_id INT NOT NULL,
    score DECIMAL(5,2) NOT NULL DEFAULT 0.00,
    max_score DECIMAL(5,2) NOT NULL,
    attempted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP NULL,
    time_taken INT NULL, -- in minutes
    FOREIGN KEY (quiz_id) REFERENCES Quizzes(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    INDEX idx_quiz_user (quiz_id, user_id),
    INDEX idx_attempted_at (attempted_at)
);

-- Create Discussions table (depends on Courses and Users)
CREATE TABLE Discussions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    course_id INT NOT NULL,
    title VARCHAR(200) NOT NULL,
    created_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_pinned BOOLEAN DEFAULT FALSE,
    is_locked BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (course_id) REFERENCES Courses(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (created_by) REFERENCES Users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    INDEX idx_course_created (course_id, created_at),
    INDEX idx_pinned (is_pinned)
);
